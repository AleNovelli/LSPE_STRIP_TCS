'**********************************************************************************************************
'PROJECT: LSPE-STRIP
'
'TrioController: ELEVATION
'Program: STARTUP
'
'Description:
'   This program is run at startup as process 0 (or after STARTUP_DELAY as process 1)
'   All axis parameters, Comm's setup, and I/O, VR initialisation are included in this program.
'**********************************************************************************************************


INCLUDE "COMMON" 'include I/O and VR constants and parameters
ignore_basic_err=FALSE 'Before the program terminates we set the 'ignore_basic_err' flag to prevent
'an error message being generated by a normal program termination.

'ON BASICERROR GOSUB basic_err
WDOG=OFF 'we do not need to activate the servo drives for now

VR(software_version)=1.1
VR(firmware_version)=0.1
PRINT#5,"-----------------"
PRINT#5,"MSS-K 1-AXIS software v";VR(software_version)
PRINT#5,"Controller firmware v";VR(firmware_version)
PRINT#5,"STARTUP Running"

GOSUB initialise_vr
GOSUB initialise_io
GOSUB comms_setup
GOSUB axis0_setup
GOSUB encoder_setup '<--------------------POCO CHIAROO ???????

IF PROC_STATUS PROC(2) = 0 THEN RUN "MONITOR",2
WAIT UNTIL PROC_STATUS PROC(2)=1

ignore_basic_err=TRUE 'setting to ON so that stopping a program does not trigger an error and the basic_err subroutine
STOP


'-------------------------------------------------------------------------------
'Set initial VR settings at system power up.
'-------------------------------------------------------------------------------
initialise_vr:
PRINT#5,"Initialising VR values"
VR(err_proc_no)=0
VR(err_line_no)=0
VR(err_code_no)=0
VR(mask_basic_err)=FALSE
VR(mask_limits)=FALSE
VR(basic_err_fault)=FALSE

'Status VR's
VR(system_status)=initialising
VR(fault_status)=no_fault
'VR(home_status)=not_homed 'comment out this line if absolute encoders being used and homing is not required
VR(home_status)=home_complete 'comment out this line if incremental encoders being used and homing is required
VR(fault_latch)=OFF
VR(system_warning)=no_warning
VR(i_o_status_0_31)=0
VR(i_o_status_32_63)=0

'Command VR's
VR(motion_command)=stop_all
VR(fault_acknowledge)=OFF
'VR(aout_0_value)=0
'VR(aout_1_value)=0

'User VR's
VR(enc_update_freq)=4

IF VR(default_vr)=0 THEN 'Default VR settings for first power up only
    PRINT#5,"Setting default axis parameters"
    'Axis 0 default settings
    VR(ax0_limit_config)=0 'No limit switches <-----------???CHECK
    VR(ax0_home_config)=0 'No home switch  <-----------???CHECK
    VR(ax0_steps_rev)=2^32 '32-bit encoder position  <-----------???CHECK
    VR(ax0_units_rev)=180 'units set to degrees (encoder is on output side of 1800:1 gear box)
    VR(ax0_rollover_dist)=9999999
    VR(ax0_rollover_option)=0 'see Trio REP_DIST command (axis position is in range -180:180)
    VR(ax0_min_pos)=-999999
    VR(ax0_max_pos)=999999
    VR(ax0_jogspeed)=1
    VR(ax0_creep_speed)=0.25
    VR(ax0_move_speed)=5
    VR(ax0_accel_decel)=10
    VR(ax0_s_curve_time)=10 'S-curve of 10ms <-----------???
    VR(ax0_move_dist)=1 'Incremental distance to move <-----------???
    VR(ax0_move_pos)=1 'Absolute target position <-----------???
    VR(ax0_limit_dist)=1 'The distance the axis will move to recover from hitting a limit <-----------???

    'Encoder axis default settings <-----------???
    VR(encoder_steps_rev)=4000
    VR(encoder_units_rev)=1 'Units set to revs
    VR(encoder_rollover_dist)=999999
    VR(encoder_rollover_option)=0 'see Trio REP_DIST command

    VR(motion_axis)=x

    VR(default_vr)=1
ENDIF

RETURN



'-------------------------------------------------------------------------------
'Initial I/O setting at start up
'-------------------------------------------------------------------------------
initialise_io:

PRINT#5,"Initialising I/O"

'If N/O limit or home switches are used invert the input signal
'it inverts the ON and OFF of the inputs so that on 0Volts the error inputs are ON (for safety reasons)
'
'--->NON USANDO LIMIT SWITCHES E HOME SWITHCES NON CI SERVONO
'IF VR(ax0_limit_config)=2 THEN INVERT_IN(in_ax0_pos_limit,ON) ELSE INVERT_IN(in_ax0_pos_limit,OFF)
'IF VR(ax1_limit_config)=2 THEN INVERT_IN(in_ax1_pos_limit,ON) ELSE INVERT_IN(in_ax1_pos_limit,OFF)
'IF VR(ax2_limit_config)=2 THEN INVERT_IN(in_ax2_pos_limit,ON) ELSE INVERT_IN(in_ax2_pos_limit,OFF)
'IF VR(ax3_limit_config)=2 THEN INVERT_IN(in_ax3_pos_limit,ON) ELSE INVERT_IN(in_ax3_pos_limit,OFF)
'IF VR(ax0_limit_config)=2 THEN INVERT_IN(in_ax0_neg_limit,ON) ELSE INVERT_IN(in_ax0_neg_limit,OFF)
'IF VR(ax1_limit_config)=2 THEN INVERT_IN(in_ax1_neg_limit,ON) ELSE INVERT_IN(in_ax1_neg_limit,OFF)
'IF VR(ax2_limit_config)=2 THEN INVERT_IN(in_ax2_neg_limit,ON) ELSE INVERT_IN(in_ax2_neg_limit,OFF)
'IF VR(ax3_limit_config)=2 THEN INVERT_IN(in_ax3_neg_limit,ON) ELSE INVERT_IN(in_ax3_neg_limit,OFF)
'IF VR(ax0_home_config)=2 OR VR(ax0_home_config)=4 THEN INVERT_IN(in_ax0_home,ON) ELSE INVERT_IN(in_ax0_home,OFF)
'IF VR(ax1_home_config)=2 OR VR(ax1_home_config)=4 THEN INVERT_IN(in_ax1_home,ON) ELSE INVERT_IN(in_ax1_home,OFF)
'IF VR(ax2_home_config)=2 OR VR(ax2_home_config)=4 THEN INVERT_IN(in_ax2_home,ON) ELSE INVERT_IN(in_ax2_home,OFF)
'IF VR(ax3_home_config)=2 OR VR(ax3_home_config)=4 THEN INVERT_IN(in_ax3_home,ON) ELSE INVERT_IN(in_ax3_home,OFF)

'Ensure all outputs are off
OP(out_fault_lamp,OFF)
OP(out_relay_0,OFF)
OP(out_relay_1,OFF)
'Add any additional user outputs here

'se NON uso DAC outputs non mi serve
'Set all analogue outputs to 0v
'DAC AXIS(aout_user_0)=0
'DAC AXIS(aout_user_1)=0

RETURN


'-------------------------------------------------------------------------------
'Communications for RS232 programming port, RS485 port, Ethernet Port, and EtherCAT
'-------------------------------------------------------------------------------
comms_setup:

'Setup CAN I/O <-----------------------------------------------DA CAPIRE COME FARE UNA VOLTA RISOLTO IL CANBUS------
'PRINT#5,"Checking CAN I/O network status"
'IF CANIO_STATUS<>32 THEN PRINT#5,"CAN I/O Error - CANIO_STATUS is :",CANIO_STATUS

'Initialise Ethercat network
PRINT#5,"Initialising AKD EtherCAT nework"
PRINT#5,"Starting EtherCAT"
ETHERCAT(0,0)
VR(ethercat_state)=0

'QUESTO PER ORA LO COMMENTO PERCHÃ© NON HA ALCUN MOTORE CON CUI INIZIARE CONNESSIONE ETHERCAT <------------------------
'WHILE VR(ethercat_state)<>3 'Wait for EtherCAT state to be operational (initializing=0, operational=3)
'    ETHERCAT($22, 0, ethercat_state) 'prints ethercat state on VR(ethercat_state)
'    WA(10)
'WEND

WA(100)
'If using AKD in TORQUE control mode run the below subroutine <----------- LI VOGLIAMO USARE IN TORQUE CONTROL MODE????
'GOSUB reset_ethercat  '<-------- RIPRENDILO DAL FILE .txt IN CASO
PRINT#5,"EtherCAT comms setup complete"

'Set Ethernet port for Modbus TCP
PRINT#5,"Setting Ethernet port for Modbus TCP"
ETHERNET(1, -1, 14, 0, 1, 3) 'Modbus TCP data assigned to VR
ETHERNET(1, -1, 14, 0, 2, 2) 'Modbus TCP 32 bit floats mode
ETHERNET(1,-1,10,502) 'Modbus port number

RETURN


'-------------------------------------------------------------------------------
'Set Axis 0 parameters
'-------------------------------------------------------------------------------
axis0_setup:

PRINT#5,"Setting Axis 0 parameters"
BASE(ax0)
SERVO=OFF
AXIS_ENABLE=OFF
ERRORMASK=4+8+256 'WDOG is switched off for comms failures, drive fault, or following error
IF VR(ax0_limit_config)<>0 THEN FWD_IN = in_ax0_pos_limit ELSE FWD_IN = -1
IF VR(ax0_limit_config)<>0 THEN REV_IN = in_ax0_neg_limit ELSE REV_IN = -1
IF VR(ax0_home_config)<>0 THEN DATUM_IN = in_ax0_home ELSE DATUM_IN = -1
UNITS=VR(ax0_steps_rev)/VR(ax0_units_rev) 'Calculate axis units
ENCODER_RATIO(1,1) 'Direction NOT Inverted
STEP_RATIO(1,1)
DAC_SCALE=1
'If Position control
OUTLIMIT=2147483647 'Default value
P_GAIN=1
I_GAIN=0
D_GAIN=0
OV_GAIN=0
VFF_GAIN=0
'If torque control
'OUTLIMIT=3000 '3000 = 300% nominal current
'P_GAIN=0.0035
'I_GAIN=0
'D_GAIN=0
'OV_GAIN=-0.02
'VFF_GAIN=0
SPEED=VR(ax0_jogspeed)
ACCEL=VR(ax0_accel_decel)
DECEL=VR(ax0_accel_decel)
SRAMP=VR(ax0_s_curve_time)
CREEP=VR(ax0_creep_speed)
JOGSPEED=VR(ax0_jogspeed)
FE_LIMIT=0.5 '999999
DRIVE_FE_LIMIT=1000 '999999
FE_RANGE=0.25 '999999
REP_DIST=VR(ax0_rollover_dist)
REP_OPTION=VR(ax0_rollover_option)
FHOLD_IN=-1
FS_LIMIT=VR(ax0_max_pos)
RS_LIMIT=VR(ax0_min_pos)
'DEFPOS(0)

RETURN


'-------------------------------------------------------------------------------
'Set Encoder Axis parameters
'-------------------------------------------------------------------------------
encoder_setup:
BASE(encoder_axis)
UNITS=VR(encoder_steps_rev)/VR(encoder_units_rev) 'Calculate axis units  '<--------------------POCO CHIAROO ???????
RETURN


'-------------------------------------------------------------------------------
'Programming Errors are trapped here.
'Before the program terminates we set the 'ignore_basic_err' flag to prevent
'an error message being generated by a normal program termination.
'-------------------------------------------------------------------------------
basic_err:
IF ignore_basic_err<>TRUE AND VR(mask_basic_err)<>TRUE THEN
    IF RUN_ERROR=31 THEN
        PRINT#5,"STARTUP - PROGRAM ABORTED AT LINE ";ERROR_LINE
        STOP
    ELSE
        PRINT#5,"STARTUP - basic_err Error Line ";ERROR_LINE
        PRINT#5,"STARTUP - basic_err Run Error ";RUN_ERROR
    ENDIF
    VR(err_proc_no)=PROCNUMBER
    VR(err_line_no)=ERROR_LINE
    VR(err_code_no)=RUN_ERROR
    VR(basic_err_fault)=TRUE 'Signal fault to MONITOR program
    RAPIDSTOP (2) 'Stop motion on all axis
    FOR ax=0 TO axis_count 'Clear any buffered moves
        CANCEL(2) AXIS(ax)
    NEXT ax
    WA(10)
    FOR ax=0 TO axis_count 'Wait for all axis to stop
        WAIT IDLE AXIS(ax)
    NEXT ax

    WDOG=OFF
    WA(10)
    VR(fault_status)=basic_error 'set here becasue the monitor program wont be running on startup
ENDIF
STOP

RETURN




