'**********************************************************************************************************
'PROJECT: LSPE-STRIP
'
'TrioController: AZIMUTH
'Program: MAIN
'
'Description
'   This is the program which countinuously updates VR values with the TICKS and positions of the AXIS
'   It is run as process 5 from MONITOR
'**********************************************************************************************************

INCLUDE "COMMON"
ignore_basic_err=0
ON BASICERROR GOSUB basic_err
PRINT#5,"ENCODER_UPDATE Running"

encoder_update_freq=4
delay=1000/encoder_update_freq 'delay between two measurements of the positions of the motors

tmp=VR(master_time_from_mc) 'saving the master time on a temporary variable
'   (we will need it TO be able TO check when the master TIME changes)

REPEAT
    WAIT UNTIL VR(master_time_from_mc)<>tmp'waiting until the time from the master clock is updated

    'faccio l'update del tempo che viene letto dalla workstation
    VR(master_time_to_ws)=VR(master_time_from_mc)
    PRINT "time is", VR(master_time_from_mc), "tmp is", tmp
    WAIT UNTIL IN(in_user_tos)=ON 'waiting from the signal of the Top Of Second

    'wiriting the TICKS parameter and the position of the axis on VR
    SERVO_READ(ticks_write, TICKS, MPOS AXIS(0))
    PRINT 0, VR(master_time_to_ws), VR(ticks_write)

    'salviamo il numero di tick del programma all'inizio del secondo corrente
    start_of_second=VR(ticks_write)

    tmp=VR(master_time_from_mc) 'updating the temporary variable

    FOR i=1 TO encoder_update_freq-1 'cicle over the num of times we need to write the position of the axis in 1 sec
        '(we start from 1 because we have already written the position once exactly at the Top Of Second)
        WAIT UNTIL TICKS<=start_of_second-i*delay 'waiting the appropriate delay
        SERVO_READ(ticks_write, TICKS, MPOS AXIS(0))'updating the TICKS and axis position
        PRINT i, VR(master_time_to_ws), VR(ticks_write)

        IF TICKS<start_of_second-1000+delay/2 THEN
            PRINT "Breaking Encoder Update"
            i=encoder_update_freq-1
        ENDIF
        WA(delay/2)
    NEXT i

    'FOR i=1 TO encoder_update_freq-1 'cicle over the num of times we need to write the position of the axis in 1 sec
    '(we start from 1 because we have already written the position once exactly at the Top Of Second)
    '    WAIT UNTIL TICKS<=start_of_second-i*delay 'waiting the appropriate delay
    '    SERVO_READ(ticks_write, TICKS, MPOS AXIS(0))'updating the TICKS and axis position
    '    PRINT i, VR(master_time_to_ws), VR(ticks_write)
    '    WA(delay/2)
    'NEXT i

UNTIL FALSE

ignore_basic_err=TRUE
STOP

'-------------------------------------------------------------------------------
'Programming Errors are trapped here.
'Before the program terminates we set the 'ignore_basic_err' flag to prevent
'an error message being generated by a normal program termination.
'-------------------------------------------------------------------------------
basic_err:
IF ignore_basic_err<>TRUE AND VR(mask_basic_err)<>TRUE THEN
    IF RUN_ERROR=31 THEN
        PRINT#5,"VR_UPDATE - PROGRAM ABORTED AT LINE ";ERROR_LINE
        STOP
    ELSE
        PRINT#5,"VR_UPDATE - basic_err Error Line ";ERROR_LINE
        PRINT#5,"VR_UPDATE - basic_err Run Error ";RUN_ERROR
    ENDIF
    VR(err_proc_no)=PROCNUMBER
    VR(err_line_no)=ERROR_LINE
    VR(err_code_no)=RUN_ERROR
    VR(basic_err_fault)=TRUE 'Signal fault to MONITOR program
    RAPIDSTOP 'Stop motion on all axis
    FOR ax=0 TO axis_count 'Clear any buffered moves
        CANCEL(2) AXIS(ax)
    NEXT ax
    WA(10)
    FOR ax=0 TO axis_count 'Wait for all axis to stop
        WAIT IDLE AXIS(ax)
    NEXT ax

    WDOG=OFF
    WA(10)
ENDIF
STOP

RETURN




