'**********************************************************************************************************
'PROJECT: LSPE-STRIP
'
'TrioController: AZIMUTH
'Program: MAIN
'
'Description
'   This is the program which countinuously updates VR values with the TICKS and positions of the AXIS
'   It is run as process 5 from MONITOR
'**********************************************************************************************************

INCLUDE "COMMON"
ignore_basic_err=0
ON BASICERROR GOSUB basic_err
PRINT#5,"ENCODER_UPDATE Running"

delay=10^6/SERVO_PERIOD/VR(enc_update_freq) 'delay between two measurements of the positions of the motors

sample_index=1

p=0

WHILE KEY#p
    GET#p, dump_var
WEND

GET #p, b1
GET #p, b2
GET #p, b3
GET #p, b4
VR(master_time_from_mc)=b1*2^24 +b2*2^16+ b3*2^8+ b4
VR(master_time_to_ws)=b1*2^24 +b2*2^16+ b3*2^8+ b4
WAIT UNTIL IN(in_user_tos)
VR(ticks_at_tos)=TICKS


'PRINT#5,VR(master_time_to_ws), VR(master_time_from_mc)


REPEAT

    IF KEY #p THEN
        GET #p, b1
        GET #p, b2
        GET #p, b3
        GET #p, b4
        VR(master_time_from_mc)=b1*2^24 +b2*2^16+ b3*2^8+ b4
        PRINT #5,"mast Time", VR(master_time_from_mc)
    ENDIF
    IF IN(in_user_tos) AND VR(master_time_to_ws)<>VR(master_time_from_mc) THEN
        VR(master_time_to_ws)=VR(master_time_from_mc)
        SERVO_READ(ticks_write, TICKS, ENCODER AXIS(0), TICKS)
        PRINT #5, VR(master_time_from_mc), TICKS, MPOS AXIS(0), TICKS
        'start_of_second=VR(ticks_at_tos)
        'VR(master_clock_safety_flag)=200 'NON PIÃ¹ usata
        sample_index=1
    ENDIF
    'PRINT #5, TICKS, VR(ticks_at_tos)-sample_index*delay
    IF TICKS<=VR(ticks_at_tos)-sample_index*delay THEN
        SERVO_READ(ticks_write, TICKS, MPOS AXIS(0))
        sample_index=sample_index+1
        PRINT#5, sample_index, TICKS-VR(ticks_at_tos)
        IF sample_index>= VR(enc_update_freq)THEN
            VR(mc_warning)=1
        ELSE
            VR(mc_warning)=0
        ENDIF
        IF sample_index>=VR(enc_update_freq)*60 THEN
            VR(fault_status)=master_clock
        ENDIF
    ENDIF

UNTIL FALSE

ignore_basic_err=TRUE
STOP

'-------------------------------------------------------------------------------
'Programming Errors are trapped here.
'Before the program terminates we set the 'ignore_basic_err' flag to prevent
'an error message being generated by a normal program termination.
'-------------------------------------------------------------------------------
basic_err:
IF ignore_basic_err<>TRUE AND VR(mask_basic_err)<>TRUE THEN
    IF RUN_ERROR=31 THEN
        PRINT#5,"VR_UPDATE - PROGRAM ABORTED AT LINE ";ERROR_LINE
        STOP
    ELSE
        PRINT#5,"VR_UPDATE - basic_err Error Line ";ERROR_LINE
        PRINT#5,"VR_UPDATE - basic_err Run Error ";RUN_ERROR
    ENDIF
    VR(err_proc_no)=PROCNUMBER
    VR(err_line_no)=ERROR_LINE
    VR(err_code_no)=RUN_ERROR
    VR(basic_err_fault)=TRUE 'Signal fault to MONITOR program
    RAPIDSTOP 'Stop motion on all axis
    FOR ax=0 TO axis_count 'Clear any buffered moves
        CANCEL(2) AXIS(ax)
    NEXT ax
    WA(10)
    FOR ax=0 TO axis_count 'Wait for all axis to stop
        WAIT IDLE AXIS(ax)
    NEXT ax

    WDOG=OFF
    WA(10)
ENDIF
STOP

RETURN




